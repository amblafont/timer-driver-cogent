(*
This file is generated by Cogent

*)

theory Driver_Shallow_Normal
imports "Driver_ShallowShared"
begin

definition
  reset_timer_e_cogent :: " Meson_timer_reg\<^sub>T \<Rightarrow>  Meson_timer_reg\<^sub>T"
where
  "reset_timer_e_cogent ds\<^sub>0 \<equiv> HOL.Let ds\<^sub>0 (\<lambda>r. HOL.Let (0 :: 32 word) (\<lambda>an\<^sub>1. Meson_timer_reg.timer_e\<^sub>f_update (\<lambda>_. an\<^sub>1) r))"

definition
  meson_get_time :: " Meson_timer\<^sub>T \<Rightarrow> 64 word"
where
  "meson_get_time ds\<^sub>0 \<equiv> HOL.Let ds\<^sub>0 (\<lambda>timer. HOL.Let (Meson_timer.regs\<^sub>f timer) (\<lambda>an\<^sub>3. HOL.Let (Meson_timer_reg.timer_e_hi\<^sub>f an\<^sub>3) (\<lambda>an\<^sub>2. HOL.Let (ucast an\<^sub>2 :: 64 word) (\<lambda>initial_high. HOL.Let (Meson_timer.regs\<^sub>f timer) (\<lambda>an\<^sub>6. HOL.Let (Meson_timer_reg.timer_e\<^sub>f an\<^sub>6) (\<lambda>an\<^sub>5. HOL.Let (ucast an\<^sub>5 :: 64 word) (\<lambda>low. HOL.Let (Meson_timer.regs\<^sub>f timer) (\<lambda>an\<^sub>9. HOL.Let (Meson_timer_reg.timer_e_hi\<^sub>f an\<^sub>9) (\<lambda>an\<^sub>8. HOL.Let (ucast an\<^sub>8 :: 64 word) (\<lambda>high. HOL.Let ((~=) high initial_high) (\<lambda>an\<^sub>1\<^sub>1. HOL.If an\<^sub>1\<^sub>1 (HOL.Let (Meson_timer.regs\<^sub>f timer) (\<lambda>an\<^sub>1\<^sub>5. HOL.Let (Meson_timer_reg.timer_e\<^sub>f an\<^sub>1\<^sub>5) (\<lambda>an\<^sub>1\<^sub>4. HOL.Let (ucast an\<^sub>1\<^sub>4 :: 64 word) (\<lambda>low'. HOL.Let (32 :: 64 word) (\<lambda>an\<^sub>1\<^sub>9. HOL.Let (checked_shift shiftl high an\<^sub>1\<^sub>9) (\<lambda>an\<^sub>1\<^sub>7. HOL.Let ((OR) an\<^sub>1\<^sub>7 low') (\<lambda>ticks. HOL.Let (1000 :: 64 word) (\<lambda>an\<^sub>2\<^sub>2. HOL.Let ((*) ticks an\<^sub>2\<^sub>2) (\<lambda>time. time))))))))) (HOL.Let low (\<lambda>low'. HOL.Let (32 :: 64 word) (\<lambda>an\<^sub>2\<^sub>5. HOL.Let (checked_shift shiftl high an\<^sub>2\<^sub>5) (\<lambda>an\<^sub>2\<^sub>3. HOL.Let ((OR) an\<^sub>2\<^sub>3 low') (\<lambda>ticks. HOL.Let (1000 :: 64 word) (\<lambda>an\<^sub>2\<^sub>8. HOL.Let ((*) ticks an\<^sub>2\<^sub>8) (\<lambda>time. time))))))))))))))))))"

definition
  meson_init :: "( Meson_timer\<^sub>T,  VAddr) T1 \<Rightarrow>  Meson_timer\<^sub>T"
where
  "meson_init ds\<^sub>0 \<equiv> HOL.Let (take\<^sub>c\<^sub>o\<^sub>g\<^sub>e\<^sub>n\<^sub>t ds\<^sub>0 T1.p1\<^sub>f) (\<lambda>(timer,ds\<^sub>1). HOL.Let (take\<^sub>c\<^sub>o\<^sub>g\<^sub>e\<^sub>n\<^sub>t ds\<^sub>1 T1.p2\<^sub>f) (\<lambda>(vaddr,ds\<^sub>2). HOL.Let (config_get_regs vaddr) (\<lambda>regs. HOL.Let () (\<lambda>an\<^sub>3\<^sub>9. HOL.Let (Timeout_timebase.TIMEOUT_TIMEBASE_1_MS an\<^sub>3\<^sub>9 ::  Timeout_timebase\<^sub>T) (\<lambda>an\<^sub>3\<^sub>8. HOL.Let an\<^sub>3\<^sub>8 (\<lambda>an\<^sub>3\<^sub>7. HOL.Let (Meson_timer_reg.timer_a_input_clk\<^sub>f_update (\<lambda>_. an\<^sub>3\<^sub>7) regs) (\<lambda>an\<^sub>3\<^sub>5. HOL.Let () (\<lambda>an\<^sub>4\<^sub>2. HOL.Let (Timestamp_timebase.TIMESTAMP_TIMEBASE_1_US an\<^sub>4\<^sub>2 ::  Timestamp_timebase\<^sub>T) (\<lambda>an\<^sub>4\<^sub>1. HOL.Let an\<^sub>4\<^sub>1 (\<lambda>an\<^sub>4\<^sub>0. HOL.Let (Meson_timer_reg.timer_e_input_clk\<^sub>f_update (\<lambda>_. an\<^sub>4\<^sub>0) an\<^sub>3\<^sub>5) (\<lambda>an\<^sub>3\<^sub>4. HOL.Let (reset_timer_e an\<^sub>3\<^sub>4) (\<lambda>an\<^sub>3\<^sub>3. Meson_timer.regs\<^sub>f_update (\<lambda>_. an\<^sub>3\<^sub>3) timer))))))))))))"

definition
  meson_set_timeout :: "( Meson_timer\<^sub>T, 16 word, bool) T0 \<Rightarrow>  Meson_timer\<^sub>T"
where
  "meson_set_timeout ds\<^sub>0 \<equiv> HOL.Let (take\<^sub>c\<^sub>o\<^sub>g\<^sub>e\<^sub>n\<^sub>t ds\<^sub>0 T0.p1\<^sub>f) (\<lambda>(ds\<^sub>1,ds\<^sub>2). HOL.Let (take\<^sub>c\<^sub>o\<^sub>g\<^sub>e\<^sub>n\<^sub>t ds\<^sub>2 T0.p2\<^sub>f) (\<lambda>(timeout,ds\<^sub>3). HOL.Let (take\<^sub>c\<^sub>o\<^sub>g\<^sub>e\<^sub>n\<^sub>t ds\<^sub>3 T0.p3\<^sub>f) (\<lambda>(periodic,ds\<^sub>4). HOL.Let (take\<^sub>c\<^sub>o\<^sub>g\<^sub>e\<^sub>n\<^sub>t ds\<^sub>1 Meson_timer.regs\<^sub>f) (\<lambda>(regs,timer). HOL.Let (Meson_timer_reg.timer_a_mode\<^sub>f_update (\<lambda>_. periodic) regs) (\<lambda>an\<^sub>4\<^sub>7. HOL.Let (ucast timeout :: 32 word) (\<lambda>an\<^sub>5\<^sub>0. HOL.Let (Meson_timer_reg.timer_a\<^sub>f_update (\<lambda>_. an\<^sub>5\<^sub>0) an\<^sub>4\<^sub>7) (\<lambda>regs'. Let\<^sub>d\<^sub>s (Meson_timer.disable\<^sub>f timer) (\<lambda>ds\<^sub>5. HOL.If ds\<^sub>5 (HOL.Let True (\<lambda>an\<^sub>5\<^sub>8. HOL.Let (Meson_timer_reg.timer_a_en\<^sub>f_update (\<lambda>_. an\<^sub>5\<^sub>8) regs') (\<lambda>an\<^sub>5\<^sub>6. HOL.Let (Meson_timer.regs\<^sub>f_update (\<lambda>_. an\<^sub>5\<^sub>6) timer) (\<lambda>an\<^sub>5\<^sub>4. HOL.Let False (\<lambda>an\<^sub>5\<^sub>9. Meson_timer.disable\<^sub>f_update (\<lambda>_. an\<^sub>5\<^sub>9) an\<^sub>5\<^sub>4))))) (Meson_timer.regs\<^sub>f_update (\<lambda>_. regs') timer)))))))))"

definition
  meson_stop_timer :: " Meson_timer\<^sub>T \<Rightarrow>  Meson_timer\<^sub>T"
where
  "meson_stop_timer ds\<^sub>0 \<equiv> HOL.Let (take\<^sub>c\<^sub>o\<^sub>g\<^sub>e\<^sub>n\<^sub>t ds\<^sub>0 Meson_timer.regs\<^sub>f) (\<lambda>(regs,timer). HOL.Let False (\<lambda>an\<^sub>6\<^sub>7. HOL.Let (Meson_timer_reg.timer_a_en\<^sub>f_update (\<lambda>_. an\<^sub>6\<^sub>7) regs) (\<lambda>an\<^sub>6\<^sub>5. HOL.Let (Meson_timer.regs\<^sub>f_update (\<lambda>_. an\<^sub>6\<^sub>5) timer) (\<lambda>an\<^sub>6\<^sub>3. HOL.Let True (\<lambda>an\<^sub>6\<^sub>8. Meson_timer.disable\<^sub>f_update (\<lambda>_. an\<^sub>6\<^sub>8) an\<^sub>6\<^sub>3)))))"

end
