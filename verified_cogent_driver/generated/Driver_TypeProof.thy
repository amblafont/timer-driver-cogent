(*
This file is generated by Cogent

*)

theory Driver_TypeProof
imports "Cogent.TypeProofGen"
"Cogent.AssocLookup"
begin

definition
  abbreviatedType1 :: " Cogent.type"
where
  "abbreviatedType1 \<equiv> TRecord [(''regs'', (TRecord [(''timer_a_en'', (TPrim Bool, Present)), (''timer_a'', (TPrim (Num U32), Present)), (''timer_a_mode'', (TPrim Bool, Present)), (''timer_a_input_clk'', (TSum [(''TIMEOUT_TIMEBASE_100_US'', (TUnit, Unchecked)), (''TIMEOUT_TIMEBASE_10_US'', (TUnit, Unchecked)), (''TIMEOUT_TIMEBASE_1_MS'', (TUnit, Unchecked)), (''TIMEOUT_TIMEBASE_1_US'', (TUnit, Unchecked))], Present)), (''timer_e'', (TPrim (Num U32), Present)), (''timer_e_hi'', (TPrim (Num U32), Present)), (''timer_e_input_clk'', (TSum [(''TIMESTAMP_TIMEBASE_100_US'', (TUnit, Unchecked)), (''TIMESTAMP_TIMEBASE_10_US'', (TUnit, Unchecked)), (''TIMESTAMP_TIMEBASE_1_MS'', (TUnit, Unchecked)), (''TIMESTAMP_TIMEBASE_1_US'', (TUnit, Unchecked)), (''TIMESTAMP_TIMEBASE_SYSTEM'', (TUnit, Unchecked))], Present))] (Boxed Writable (Some (LayRecord [(''timer_a'', LayBitRange (32, 32)), (''timer_a_en'', LayBitRange (Suc 0, 15)), (''timer_a_input_clk'', LayVariant (2, 8) [(''TIMEOUT_TIMEBASE_100_US'', 2, LayBitRange (0, 0)), (''TIMEOUT_TIMEBASE_10_US'', Suc 0, LayBitRange (0, 0)), (''TIMEOUT_TIMEBASE_1_MS'', 3, LayBitRange (0, 0)), (''TIMEOUT_TIMEBASE_1_US'', 0, LayBitRange (0, 0))]), (''timer_a_mode'', LayBitRange (Suc 0, 11)), (''timer_e'', LayBitRange (32, 576)), (''timer_e_hi'', LayBitRange (32, 608)), (''timer_e_input_clk'', LayVariant (3, 0) [(''TIMESTAMP_TIMEBASE_100_US'', 3, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_10_US'', 2, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_1_MS'', 4, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_1_US'', Suc 0, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_SYSTEM'', 0, LayBitRange (0, 0))])]))), Present)), (''disable'', (TPrim Bool, Present))] (Boxed Writable None)"

definition
  abbreviatedType2 :: " Cogent.type"
where
  "abbreviatedType2 \<equiv> TRecord [(''timer_a_en'', (TPrim Bool, Present)), (''timer_a'', (TPrim (Num U32), Present)), (''timer_a_mode'', (TPrim Bool, Present)), (''timer_a_input_clk'', (TSum [(''TIMEOUT_TIMEBASE_100_US'', (TUnit, Unchecked)), (''TIMEOUT_TIMEBASE_10_US'', (TUnit, Unchecked)), (''TIMEOUT_TIMEBASE_1_MS'', (TUnit, Unchecked)), (''TIMEOUT_TIMEBASE_1_US'', (TUnit, Unchecked))], Present)), (''timer_e'', (TPrim (Num U32), Present)), (''timer_e_hi'', (TPrim (Num U32), Present)), (''timer_e_input_clk'', (TSum [(''TIMESTAMP_TIMEBASE_100_US'', (TUnit, Unchecked)), (''TIMESTAMP_TIMEBASE_10_US'', (TUnit, Unchecked)), (''TIMESTAMP_TIMEBASE_1_MS'', (TUnit, Unchecked)), (''TIMESTAMP_TIMEBASE_1_US'', (TUnit, Unchecked)), (''TIMESTAMP_TIMEBASE_SYSTEM'', (TUnit, Unchecked))], Present))] (Boxed Writable (Some (LayRecord [(''timer_a'', LayBitRange (32, 32)), (''timer_a_en'', LayBitRange (Suc 0, 15)), (''timer_a_input_clk'', LayVariant (2, 8) [(''TIMEOUT_TIMEBASE_100_US'', 2, LayBitRange (0, 0)), (''TIMEOUT_TIMEBASE_10_US'', Suc 0, LayBitRange (0, 0)), (''TIMEOUT_TIMEBASE_1_MS'', 3, LayBitRange (0, 0)), (''TIMEOUT_TIMEBASE_1_US'', 0, LayBitRange (0, 0))]), (''timer_a_mode'', LayBitRange (Suc 0, 11)), (''timer_e'', LayBitRange (32, 576)), (''timer_e_hi'', LayBitRange (32, 608)), (''timer_e_input_clk'', LayVariant (3, 0) [(''TIMESTAMP_TIMEBASE_100_US'', 3, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_10_US'', 2, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_1_MS'', 4, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_1_US'', Suc 0, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_SYSTEM'', 0, LayBitRange (0, 0))])])))"

definition
  abbreviatedType3 :: " Cogent.type"
where
  "abbreviatedType3 \<equiv> TSum [(''TIMESTAMP_TIMEBASE_100_US'', (TUnit, Unchecked)), (''TIMESTAMP_TIMEBASE_10_US'', (TUnit, Unchecked)), (''TIMESTAMP_TIMEBASE_1_MS'', (TUnit, Unchecked)), (''TIMESTAMP_TIMEBASE_1_US'', (TUnit, Unchecked)), (''TIMESTAMP_TIMEBASE_SYSTEM'', (TUnit, Unchecked))]"

definition
  abbreviatedType4 :: " Cogent.type"
where
  "abbreviatedType4 \<equiv> TSum [(''TIMEOUT_TIMEBASE_100_US'', (TUnit, Unchecked)), (''TIMEOUT_TIMEBASE_10_US'', (TUnit, Unchecked)), (''TIMEOUT_TIMEBASE_1_MS'', (TUnit, Unchecked)), (''TIMEOUT_TIMEBASE_1_US'', (TUnit, Unchecked))]"

definition
  abbreviatedType5 :: " Cogent.type"
where
  "abbreviatedType5 \<equiv> TRecord [(''regs'', (TRecord [(''timer_a_en'', (TPrim Bool, Present)), (''timer_a'', (TPrim (Num U32), Present)), (''timer_a_mode'', (TPrim Bool, Present)), (''timer_a_input_clk'', (abbreviatedType4, Present)), (''timer_e'', (TPrim (Num U32), Present)), (''timer_e_hi'', (TPrim (Num U32), Present)), (''timer_e_input_clk'', (abbreviatedType3, Present))] (Boxed Writable (Some (LayRecord [(''timer_a'', LayBitRange (32, 32)), (''timer_a_en'', LayBitRange (Suc 0, 15)), (''timer_a_input_clk'', LayVariant (2, 8) [(''TIMEOUT_TIMEBASE_100_US'', 2, LayBitRange (0, 0)), (''TIMEOUT_TIMEBASE_10_US'', Suc 0, LayBitRange (0, 0)), (''TIMEOUT_TIMEBASE_1_MS'', 3, LayBitRange (0, 0)), (''TIMEOUT_TIMEBASE_1_US'', 0, LayBitRange (0, 0))]), (''timer_a_mode'', LayBitRange (Suc 0, 11)), (''timer_e'', LayBitRange (32, 576)), (''timer_e_hi'', LayBitRange (32, 608)), (''timer_e_input_clk'', LayVariant (3, 0) [(''TIMESTAMP_TIMEBASE_100_US'', 3, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_10_US'', 2, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_1_MS'', 4, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_1_US'', Suc 0, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_SYSTEM'', 0, LayBitRange (0, 0))])]))), Present)), (''disable'', (TPrim Bool, Present))] (Boxed Writable None)"

definition
  abbreviatedType6 :: " Cogent.type"
where
  "abbreviatedType6 \<equiv> TRecord [(''timer_a_en'', (TPrim Bool, Present)), (''timer_a'', (TPrim (Num U32), Present)), (''timer_a_mode'', (TPrim Bool, Present)), (''timer_a_input_clk'', (abbreviatedType4, Present)), (''timer_e'', (TPrim (Num U32), Present)), (''timer_e_hi'', (TPrim (Num U32), Present)), (''timer_e_input_clk'', (abbreviatedType3, Present))] (Boxed Writable (Some (LayRecord [(''timer_a'', LayBitRange (32, 32)), (''timer_a_en'', LayBitRange (Suc 0, 15)), (''timer_a_input_clk'', LayVariant (2, 8) [(''TIMEOUT_TIMEBASE_100_US'', 2, LayBitRange (0, 0)), (''TIMEOUT_TIMEBASE_10_US'', Suc 0, LayBitRange (0, 0)), (''TIMEOUT_TIMEBASE_1_MS'', 3, LayBitRange (0, 0)), (''TIMEOUT_TIMEBASE_1_US'', 0, LayBitRange (0, 0))]), (''timer_a_mode'', LayBitRange (Suc 0, 11)), (''timer_e'', LayBitRange (32, 576)), (''timer_e_hi'', LayBitRange (32, 608)), (''timer_e_input_clk'', LayVariant (3, 0) [(''TIMESTAMP_TIMEBASE_100_US'', 3, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_10_US'', 2, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_1_MS'', 4, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_1_US'', Suc 0, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_SYSTEM'', 0, LayBitRange (0, 0))])])))"

definition
  abbreviatedType7 :: " Cogent.type"
where
  "abbreviatedType7 \<equiv> TRecord [(''regs'', (abbreviatedType6, Present)), (''disable'', (TPrim Bool, Present))] (Boxed Writable None)"

definition
  abbreviatedType8 :: " Cogent.type"
where
  "abbreviatedType8 \<equiv> TRecord [(''p1'', (abbreviatedType7, Present)), (''p2'', (TPrim (Num U16), Present)), (''p3'', (TPrim Bool, Present))] Unboxed"

definition
  abbreviatedType9 :: " Cogent.type"
where
  "abbreviatedType9 \<equiv> TRecord [(''p1'', (TRecord [(''regs'', (abbreviatedType6, Taken)), (''disable'', (TPrim Bool, Present))] (Boxed Writable None), Present)), (''p2'', (TCon ''VAddr'' [] (Boxed Writable None), Present))] Unboxed"

definition
  abbreviatedType10 :: " Cogent.type"
where
  "abbreviatedType10 \<equiv> TRecord [(''regs'', (abbreviatedType6, Taken)), (''disable'', (TPrim Bool, Present))] (Boxed Writable None)"

definition
  abbreviatedType11 :: " Cogent.type"
where
  "abbreviatedType11 \<equiv> TRecord [(''regs'', (TRecord [(''timer_a_en'', (TPrim Bool, Present)), (''timer_a'', (TPrim (Num U32), Present)), (''timer_a_mode'', (TPrim Bool, Present)), (''timer_a_input_clk'', (abbreviatedType4, Present)), (''timer_e'', (TPrim (Num U32), Present)), (''timer_e_hi'', (TPrim (Num U32), Present)), (''timer_e_input_clk'', (abbreviatedType3, Present))] (Boxed ReadOnly (Some (LayRecord [(''timer_a'', LayBitRange (32, 32)), (''timer_a_en'', LayBitRange (Suc 0, 15)), (''timer_a_input_clk'', LayVariant (2, 8) [(''TIMEOUT_TIMEBASE_100_US'', 2, LayBitRange (0, 0)), (''TIMEOUT_TIMEBASE_10_US'', Suc 0, LayBitRange (0, 0)), (''TIMEOUT_TIMEBASE_1_MS'', 3, LayBitRange (0, 0)), (''TIMEOUT_TIMEBASE_1_US'', 0, LayBitRange (0, 0))]), (''timer_a_mode'', LayBitRange (Suc 0, 11)), (''timer_e'', LayBitRange (32, 576)), (''timer_e_hi'', LayBitRange (32, 608)), (''timer_e_input_clk'', LayVariant (3, 0) [(''TIMESTAMP_TIMEBASE_100_US'', 3, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_10_US'', 2, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_1_MS'', 4, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_1_US'', Suc 0, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_SYSTEM'', 0, LayBitRange (0, 0))])]))), Present)), (''disable'', (TPrim Bool, Present))] (Boxed ReadOnly None)"

definition
  abbreviatedType12 :: " Cogent.type"
where
  "abbreviatedType12 \<equiv> TRecord [(''timer_a_en'', (TPrim Bool, Present)), (''timer_a'', (TPrim (Num U32), Present)), (''timer_a_mode'', (TPrim Bool, Present)), (''timer_a_input_clk'', (abbreviatedType4, Present)), (''timer_e'', (TPrim (Num U32), Present)), (''timer_e_hi'', (TPrim (Num U32), Present)), (''timer_e_input_clk'', (abbreviatedType3, Present))] (Boxed ReadOnly (Some (LayRecord [(''timer_a'', LayBitRange (32, 32)), (''timer_a_en'', LayBitRange (Suc 0, 15)), (''timer_a_input_clk'', LayVariant (2, 8) [(''TIMEOUT_TIMEBASE_100_US'', 2, LayBitRange (0, 0)), (''TIMEOUT_TIMEBASE_10_US'', Suc 0, LayBitRange (0, 0)), (''TIMEOUT_TIMEBASE_1_MS'', 3, LayBitRange (0, 0)), (''TIMEOUT_TIMEBASE_1_US'', 0, LayBitRange (0, 0))]), (''timer_a_mode'', LayBitRange (Suc 0, 11)), (''timer_e'', LayBitRange (32, 576)), (''timer_e_hi'', LayBitRange (32, 608)), (''timer_e_input_clk'', LayVariant (3, 0) [(''TIMESTAMP_TIMEBASE_100_US'', 3, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_10_US'', 2, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_1_MS'', 4, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_1_US'', Suc 0, LayBitRange (0, 0)), (''TIMESTAMP_TIMEBASE_SYSTEM'', 0, LayBitRange (0, 0))])])))"

lemmas abbreviated_type_defs =
  abbreviatedType4_def
  abbreviatedType3_def
  abbreviatedType8_def
  abbreviatedType9_def
  abbreviatedType7_def
  abbreviatedType10_def
  abbreviatedType11_def
  abbreviatedType5_def
  abbreviatedType1_def
  abbreviatedType12_def
  abbreviatedType6_def
  abbreviatedType2_def

definition
  config_get_regs_type :: " poly_type"
where
  "config_get_regs_type \<equiv> (0, [], {}, TCon ''VAddr'' [] (Boxed Writable None), abbreviatedType6)"

definition
  reset_timer_e_type :: " poly_type"
where
  "reset_timer_e_type \<equiv> (0, [], {}, abbreviatedType6, abbreviatedType6)"

definition
  reset_timer_e_cogent_type :: " poly_type"
where
  "reset_timer_e_cogent_type \<equiv> (0, [], {}, abbreviatedType6, abbreviatedType6)"

definition
  reset_timer_e_cogent :: "string Cogent.expr"
where
  "reset_timer_e_cogent \<equiv> Let (Var 0) (Let (Lit (LU32 0)) (Put (Var 1) 4 (Var 0)))"

definition
  meson_get_time_type :: " poly_type"
where
  "meson_get_time_type \<equiv> (0, [], {}, TRecord [(''regs'', (abbreviatedType12, Present)), (''disable'', (TPrim Bool, Present))] (Boxed ReadOnly None), TPrim (Num U64))"

definition
  meson_get_time :: "string Cogent.expr"
where
  "meson_get_time \<equiv> Let (Var 0) (Let (Member (Var 0) 0) (Let (Member (Var 0) 5) (Let (Cast U64 (Var 0)) (Let (Member (Var 3) 0) (Let (Member (Var 0) 4) (Let (Cast U64 (Var 0)) (Let (Member (Var 6) 0) (Let (Member (Var 0) 5) (Let (Cast U64 (Var 0)) (Let (Prim (NEq (Num U64)) [Var 0, Var 6]) (If (Var 0) (Let (Member (Var 10) 0) (Let (Member (Var 0) 4) (Let (Cast U64 (Var 0)) (Let (Lit (LU64 32)) (Let (Prim (LShift U64) [Var 5, Var 0]) (Let (Prim (BitOr U64) [Var 0, Var 2]) (Let (Lit (LU64 1000)) (Let (Prim (Times U64) [Var 1, Var 0]) (Var 0))))))))) (Let (Var 4) (Let (Lit (LU64 32)) (Let (Prim (LShift U64) [Var 3, Var 0]) (Let (Prim (BitOr U64) [Var 0, Var 2]) (Let (Lit (LU64 1000)) (Let (Prim (Times U64) [Var 1, Var 0]) (Var 0))))))))))))))))))"

definition
  meson_init_type :: " poly_type"
where
  "meson_init_type \<equiv> (0, [], {}, TRecord [(''p1'', (abbreviatedType10, Present)), (''p2'', (TCon ''VAddr'' [] (Boxed Writable None), Present))] Unboxed, abbreviatedType7)"

definition
  meson_init :: "string Cogent.expr"
where
  "meson_init \<equiv> Take (Var 0) 0 (Take (Var 1) 1 (Let (App (AFun ''config_get_regs'' [] []) (Var 0)) (Let Unit (Let (Con [(''TIMEOUT_TIMEBASE_100_US'', (TUnit, Checked)), (''TIMEOUT_TIMEBASE_10_US'', (TUnit, Checked)), (''TIMEOUT_TIMEBASE_1_MS'', (TUnit, Unchecked)), (''TIMEOUT_TIMEBASE_1_US'', (TUnit, Checked))] ''TIMEOUT_TIMEBASE_1_MS'' (Var 0)) (Let (Promote abbreviatedType4 (Var 0)) (Let (Put (Var 3) 3 (Var 0)) (Let Unit (Let (Con [(''TIMESTAMP_TIMEBASE_100_US'', (TUnit, Checked)), (''TIMESTAMP_TIMEBASE_10_US'', (TUnit, Checked)), (''TIMESTAMP_TIMEBASE_1_MS'', (TUnit, Checked)), (''TIMESTAMP_TIMEBASE_1_US'', (TUnit, Unchecked)), (''TIMESTAMP_TIMEBASE_SYSTEM'', (TUnit, Checked))] ''TIMESTAMP_TIMEBASE_1_US'' (Var 0)) (Let (Promote abbreviatedType3 (Var 0)) (Let (Put (Var 3) 6 (Var 0)) (Let (App (AFun ''reset_timer_e'' [] []) (Var 0)) (Put (Var 12) 0 (Var 0)))))))))))))"

definition
  meson_set_timeout_type :: " poly_type"
where
  "meson_set_timeout_type \<equiv> (0, [], {}, abbreviatedType8, abbreviatedType7)"

definition
  meson_set_timeout :: "string Cogent.expr"
where
  "meson_set_timeout \<equiv> Take (Var 0) 0 (Take (Var 1) 1 (Take (Var 1) 2 (Take (Var 4) 0 (Let (Put (Var 0) 2 (Var 2)) (Let (Cast U32 (Var 5)) (Let (Put (Var 1) 1 (Var 0)) (LetBang (set [4]) (Member (Var 4) 1) (If (Var 0) (Let (Lit (LBool True)) (Let (Put (Var 2) 0 (Var 0)) (Let (Put (Var 7) 0 (Var 0)) (Let (Lit (LBool False)) (Put (Var 1) 1 (Var 0)))))) (Put (Var 5) 0 (Var 1))))))))))"

definition
  meson_stop_timer_type :: " poly_type"
where
  "meson_stop_timer_type \<equiv> (0, [], {}, abbreviatedType7, abbreviatedType7)"

definition
  meson_stop_timer :: "string Cogent.expr"
where
  "meson_stop_timer \<equiv> Take (Var 0) 0 (Let (Lit (LBool False)) (Let (Put (Var 1) 0 (Var 0)) (Let (Put (Var 3) 0 (Var 0)) (Let (Lit (LBool True)) (Put (Var 1) 1 (Var 0))))))"

ML \<open>
val Cogent_functions = ["reset_timer_e_cogent", "meson_get_time", "meson_init", "meson_set_timeout", "meson_stop_timer"]
val Cogent_abstract_functions = ["config_get_regs", "reset_timer_e"]
\<close>

definition
  \<Xi> :: " string \<Rightarrow>  poly_type"
where
  "\<Xi> \<equiv> assoc_lookup [(''config_get_regs'', config_get_regs_type), (''reset_timer_e'', reset_timer_e_type), (''reset_timer_e_cogent'', reset_timer_e_cogent_type), (''meson_get_time'', meson_get_time_type), (''meson_init'', meson_init_type), (''meson_set_timeout'', meson_set_timeout_type), (''meson_stop_timer'', meson_stop_timer_type)] (0, [], {}, TUnit, TUnit)"

definition
  "\<xi> \<equiv> assoc_lookup [(''config_get_regs'', (\<lambda>_ _. False)), (''reset_timer_e'', (\<lambda>_ _. False))]"

definition
  "reset_timer_e_cogent_typetree \<equiv> TyTrSplit (Cons (Some TSK_L) []) [] TyTrLeaf [Some abbreviatedType6] (TyTrSplit (Cons (Some TSK_R) (Cons None [])) [] TyTrLeaf [Some (TPrim (Num U32))] TyTrLeaf)"

definition
  "meson_get_time_typetree \<equiv> TyTrSplit (Cons (Some TSK_L) []) [] TyTrLeaf [Some (TRecord [(''regs'', (abbreviatedType12, Present)), (''disable'', (TPrim Bool, Present))] (Boxed ReadOnly None))] (TyTrSplit (Cons (Some TSK_S) (Cons None [])) [] TyTrLeaf [Some abbreviatedType12] (TyTrSplit (Cons (Some TSK_L) (Cons (Some TSK_R) (Cons None []))) [] TyTrLeaf [Some (TPrim (Num U32))] (TyTrSplit (Cons (Some TSK_L) (Cons None (Cons (Some TSK_R) (Cons None [])))) [] TyTrLeaf [Some (TPrim (Num U64))] (TyTrSplit (Cons (Some TSK_R) (append (replicate 2 None) (Cons (Some TSK_S) (Cons None [])))) [] TyTrLeaf [Some abbreviatedType12] (TyTrSplit (Cons (Some TSK_L) (Cons (Some TSK_R) (append (replicate 2 None) (Cons (Some TSK_R) (Cons None []))))) [] TyTrLeaf [Some (TPrim (Num U32))] (TyTrSplit (Cons (Some TSK_L) (Cons None (Cons (Some TSK_R) (append (replicate 2 None) (Cons (Some TSK_R) (Cons None [])))))) [] TyTrLeaf [Some (TPrim (Num U64))] (TyTrSplit (Cons (Some TSK_R) (append (replicate 2 None) (Cons (Some TSK_R) (append (replicate 2 None) (Cons (Some TSK_S) (Cons None [])))))) [] TyTrLeaf [Some abbreviatedType12] (TyTrSplit (Cons (Some TSK_L) (Cons (Some TSK_R) (append (replicate 2 None) (Cons (Some TSK_R) (append (replicate 2 None) (Cons (Some TSK_R) (Cons None []))))))) [] TyTrLeaf [Some (TPrim (Num U32))] (TyTrSplit (Cons (Some TSK_L) (Cons None (Cons (Some TSK_R) (append (replicate 2 None) (Cons (Some TSK_R) (append (replicate 2 None) (Cons (Some TSK_R) (Cons None [])))))))) [] TyTrLeaf [Some (TPrim (Num U64))] (TyTrSplit (Cons (Some TSK_S) (append (replicate 2 None) (Cons (Some TSK_R) (append (replicate 2 None) (Cons (Some TSK_L) (append (replicate 2 None) (Cons (Some TSK_R) (Cons None [])))))))) [] TyTrLeaf [Some (TPrim Bool)] (TyTrSplit (Cons (Some TSK_L) (Cons (Some TSK_R) (append (replicate 2 None) (Cons (Some TSK_R) (append (replicate 5 None) (Cons (Some TSK_R) (Cons None []))))))) [] TyTrLeaf [] (TyTrSplit (Cons None (Cons (Some TSK_S) (append (replicate 2 None) (Cons (Some TSK_S) (append (replicate 5 None) (Cons (Some TSK_S) (Cons None []))))))) [] (TyTrSplit (Cons None (Cons (Some TSK_R) (append (replicate 2 None) (Cons (Some TSK_L) (append (replicate 5 None) (Cons (Some TSK_L) (Cons None []))))))) [] TyTrLeaf [Some abbreviatedType12] (TyTrSplit (Cons (Some TSK_L) (Cons None (Cons (Some TSK_R) (append (replicate 10 None) [])))) [] TyTrLeaf [Some (TPrim (Num U32))] (TyTrSplit (Cons (Some TSK_L) (append (replicate 2 None) (Cons (Some TSK_R) (append (replicate 10 None) [])))) [] TyTrLeaf [Some (TPrim (Num U64))] (TyTrSplit (Cons (Some TSK_R) (append (replicate 3 None) (Cons (Some TSK_R) (append (replicate 10 None) [])))) [] TyTrLeaf [Some (TPrim (Num U64))] (TyTrSplit (Cons (Some TSK_L) (Cons (Some TSK_R) (append (replicate 3 None) (Cons (Some TSK_L) (append (replicate 10 None) []))))) [] TyTrLeaf [Some (TPrim (Num U64))] (TyTrSplit (Cons (Some TSK_L) (Cons None (Cons (Some TSK_L) (append (replicate 14 None) [])))) [] TyTrLeaf [Some (TPrim (Num U64))] (TyTrSplit (Cons (Some TSK_R) (append (replicate 17 None) [])) [] TyTrLeaf [Some (TPrim (Num U64))] (TyTrSplit (Cons (Some TSK_L) (Cons (Some TSK_L) (append (replicate 17 None) []))) [] TyTrLeaf [Some (TPrim (Num U64))] TyTrLeaf)))))))) [] (TyTrSplit (Cons None (Cons (Some TSK_R) (append (replicate 2 None) (Cons (Some TSK_L) (append (replicate 5 None) (Cons (Some TSK_L) (Cons None []))))))) [] TyTrLeaf [Some (TPrim (Num U64))] (TyTrSplit (Cons (Some TSK_R) (Cons None (Cons (Some TSK_R) (append (replicate 10 None) [])))) [] TyTrLeaf [Some (TPrim (Num U64))] (TyTrSplit (Cons (Some TSK_L) (Cons (Some TSK_R) (Cons None (Cons (Some TSK_L) (append (replicate 10 None) []))))) [] TyTrLeaf [Some (TPrim (Num U64))] (TyTrSplit (Cons (Some TSK_L) (Cons None (Cons (Some TSK_L) (append (replicate 12 None) [])))) [] TyTrLeaf [Some (TPrim (Num U64))] (TyTrSplit (Cons (Some TSK_R) (append (replicate 15 None) [])) [] TyTrLeaf [Some (TPrim (Num U64))] (TyTrSplit (Cons (Some TSK_L) (Cons (Some TSK_L) (append (replicate 15 None) []))) [] TyTrLeaf [Some (TPrim (Num U64))] TyTrLeaf))))))))))))))))))"

definition
  "meson_init_typetree \<equiv> TyTrSplit (Cons (Some TSK_L) []) [] TyTrLeaf [Some abbreviatedType10, Some (TRecord [(''p1'', (abbreviatedType10, Taken)), (''p2'', (TCon ''VAddr'' [] (Boxed Writable None), Present))] Unboxed)] (TyTrSplit (Cons (Some TSK_R) (Cons (Some TSK_L) (Cons None []))) [] TyTrLeaf [Some (TCon ''VAddr'' [] (Boxed Writable None)), Some (TRecord [(''p1'', (abbreviatedType10, Taken)), (''p2'', (TCon ''VAddr'' [] (Boxed Writable None), Taken))] Unboxed)] (TyTrSplit (Cons (Some TSK_L) (Cons (Some TSK_L) (Cons (Some TSK_R) (append (replicate 2 None) [])))) [] TyTrLeaf [Some abbreviatedType6] (TyTrSplit (Cons (Some TSK_R) (append (replicate 2 None) (Cons (Some TSK_R) (append (replicate 2 None) [])))) [] TyTrLeaf [Some TUnit] (TyTrSplit (Cons (Some TSK_L) (Cons (Some TSK_R) (append (replicate 2 None) (Cons (Some TSK_R) (append (replicate 2 None) []))))) [] TyTrLeaf [Some (TSum [(''TIMEOUT_TIMEBASE_100_US'', (TUnit, Checked)), (''TIMEOUT_TIMEBASE_10_US'', (TUnit, Checked)), (''TIMEOUT_TIMEBASE_1_MS'', (TUnit, Unchecked)), (''TIMEOUT_TIMEBASE_1_US'', (TUnit, Checked))])] (TyTrSplit (Cons (Some TSK_L) (Cons None (Cons (Some TSK_R) (append (replicate 2 None) (Cons (Some TSK_R) (append (replicate 2 None) [])))))) [] TyTrLeaf [Some abbreviatedType4] (TyTrSplit (Cons (Some TSK_L) (append (replicate 2 None) (Cons (Some TSK_L) (append (replicate 2 None) (Cons (Some TSK_R) (append (replicate 2 None) [])))))) [] TyTrLeaf [Some abbreviatedType6] (TyTrSplit (Cons (Some TSK_R) (append (replicate 6 None) (Cons (Some TSK_R) (append (replicate 2 None) [])))) [] TyTrLeaf [Some TUnit] (TyTrSplit (Cons (Some TSK_L) (Cons (Some TSK_R) (append (replicate 6 None) (Cons (Some TSK_R) (append (replicate 2 None) []))))) [] TyTrLeaf [Some (TSum [(''TIMESTAMP_TIMEBASE_100_US'', (TUnit, Checked)), (''TIMESTAMP_TIMEBASE_10_US'', (TUnit, Checked)), (''TIMESTAMP_TIMEBASE_1_MS'', (TUnit, Checked)), (''TIMESTAMP_TIMEBASE_1_US'', (TUnit, Unchecked)), (''TIMESTAMP_TIMEBASE_SYSTEM'', (TUnit, Checked))])] (TyTrSplit (Cons (Some TSK_L) (Cons None (Cons (Some TSK_R) (append (replicate 6 None) (Cons (Some TSK_R) (append (replicate 2 None) [])))))) [] TyTrLeaf [Some abbreviatedType3] (TyTrSplit (Cons (Some TSK_L) (append (replicate 2 None) (Cons (Some TSK_L) (append (replicate 6 None) (Cons (Some TSK_R) (append (replicate 2 None) [])))))) [] TyTrLeaf [Some abbreviatedType6] (TyTrSplit (Cons (Some TSK_L) (append (replicate 10 None) (Cons (Some TSK_R) (append (replicate 2 None) [])))) [] TyTrLeaf [Some abbreviatedType6] TyTrLeaf)))))))))))"

definition
  "meson_set_timeout_typetree \<equiv> TyTrSplit (Cons (Some TSK_L) []) [] TyTrLeaf [Some abbreviatedType7, Some (TRecord [(''p1'', (abbreviatedType7, Taken)), (''p2'', (TPrim (Num U16), Present)), (''p3'', (TPrim Bool, Present))] Unboxed)] (TyTrSplit (Cons (Some TSK_R) (Cons (Some TSK_L) (Cons None []))) [] TyTrLeaf [Some (TPrim (Num U16)), Some (TRecord [(''p1'', (abbreviatedType7, Taken)), (''p2'', (TPrim (Num U16), Taken)), (''p3'', (TPrim Bool, Present))] Unboxed)] (TyTrSplit (Cons (Some TSK_R) (Cons (Some TSK_L) (Cons (Some TSK_R) (append (replicate 2 None) [])))) [] TyTrLeaf [Some (TPrim Bool), Some (TRecord [(''p1'', (abbreviatedType7, Taken)), (''p2'', (TPrim (Num U16), Taken)), (''p3'', (TPrim Bool, Taken))] Unboxed)] (TyTrSplit (Cons (Some TSK_R) (Cons (Some TSK_L) (Cons (Some TSK_R) (Cons None (Cons (Some TSK_L) (append (replicate 2 None) [])))))) [] TyTrLeaf [Some abbreviatedType6, Some abbreviatedType10] (TyTrSplit (Cons (Some TSK_L) (Cons (Some TSK_R) (Cons (Some TSK_L) (Cons None (Cons (Some TSK_R) (append (replicate 4 None) [])))))) [] TyTrLeaf [Some abbreviatedType6] (TyTrSplit (Cons (Some TSK_R) (Cons None (Cons (Some TSK_R) (append (replicate 2 None) (Cons (Some TSK_L) (append (replicate 4 None) [])))))) [] TyTrLeaf [Some (TPrim (Num U32))] (TyTrSplit (Cons (Some TSK_L) (Cons (Some TSK_L) (Cons None (Cons (Some TSK_R) (append (replicate 7 None) []))))) [] TyTrLeaf [Some abbreviatedType6] (TyTrSplit (Cons (Some TSK_R) (append (replicate 3 None) (Cons (Some TSK_NS) (append (replicate 7 None) [])))) [] TyTrLeaf [Some (TPrim Bool)] (TyTrSplit (Cons (Some TSK_L) (Cons (Some TSK_R) (append (replicate 3 None) (Cons (Some TSK_R) (append (replicate 7 None) []))))) [] TyTrLeaf [] (TyTrSplit (Cons None (Cons (Some TSK_S) (append (replicate 3 None) (Cons (Some TSK_S) (append (replicate 7 None) []))))) [] (TyTrSplit (Cons None (Cons (Some TSK_R) (append (replicate 3 None) (Cons (Some TSK_R) (append (replicate 7 None) []))))) [] TyTrLeaf [Some (TPrim Bool)] (TyTrSplit (Cons (Some TSK_L) (Cons None (Cons (Some TSK_L) (append (replicate 3 None) (Cons (Some TSK_R) (append (replicate 7 None) [])))))) [] TyTrLeaf [Some abbreviatedType6] (TyTrSplit (Cons (Some TSK_L) (append (replicate 6 None) (Cons (Some TSK_L) (append (replicate 7 None) [])))) [] TyTrLeaf [Some abbreviatedType7] (TyTrSplit (Cons (Some TSK_R) (append (replicate 15 None) [])) [] TyTrLeaf [Some (TPrim Bool)] TyTrLeaf)))) [] TyTrLeaf)))))))))"

definition
  "meson_stop_timer_typetree \<equiv> TyTrSplit (Cons (Some TSK_L) []) [] TyTrLeaf [Some abbreviatedType6, Some abbreviatedType10] (TyTrSplit (Cons (Some TSK_R) (Cons (Some TSK_R) (Cons None []))) [] TyTrLeaf [Some (TPrim Bool)] (TyTrSplit (Cons (Some TSK_L) (Cons (Some TSK_L) (Cons (Some TSK_R) (Cons None [])))) [] TyTrLeaf [Some abbreviatedType6] (TyTrSplit (Cons (Some TSK_L) (append (replicate 2 None) (Cons (Some TSK_L) (Cons None [])))) [] TyTrLeaf [Some abbreviatedType7] (TyTrSplit (Cons (Some TSK_R) (append (replicate 5 None) [])) [] TyTrLeaf [Some (TPrim Bool)] TyTrLeaf))))"

ML \<open> open TTyping_Tactics \<close>

ML_quiet \<open>
val typing_helper_1_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_1[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} abbreviatedType6 {E}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_1_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_2_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_2[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} (TPrim (Num U32)) {E, S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_2_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_3_script : tac list = [
(ForceTac @{thms matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_3[unfolded abbreviated_type_defs] :
  "type_wellformed 0 0 {} (TPrim (Num U32))"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_3_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_4_script : tac list = [
(ForceTac @{thms matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_4[unfolded abbreviated_type_defs] :
  "type_wellformed 0 0 {} abbreviatedType6"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_4_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_5_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_5[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} (TRecord [(''regs'', (abbreviatedType12, Present)), (''disable'', (TPrim Bool, Present))] (Boxed ReadOnly None)) {S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_5_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_6_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_6[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} abbreviatedType12 {S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_6_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_7_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_7[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} (TPrim (Num U64)) {E, S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_7_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_8_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_8[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} (TPrim Bool) {E, S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_8_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_9_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_9[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} (TRecord [(''p1'', (abbreviatedType10, Present)), (''p2'', (TCon ''VAddr'' [] (Boxed Writable None), Present))] Unboxed) {E}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_9_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_10_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_10[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} abbreviatedType10 {E}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_10_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_11_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_11[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} (TRecord [(''p1'', (abbreviatedType10, Taken)), (''p2'', (TCon ''VAddr'' [] (Boxed Writable None), Present))] Unboxed) {E}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_11_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_12_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_12[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} (TCon ''VAddr'' [] (Boxed Writable None)) {E}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_12_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_13_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_13[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} (TRecord [(''p1'', (abbreviatedType10, Taken)), (''p2'', (TCon ''VAddr'' [] (Boxed Writable None), Taken))] Unboxed) {E, S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_13_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_14_script : tac list = [
(ForceTac @{thms matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_14[unfolded abbreviated_type_defs] :
  "type_wellformed 0 0 {} (TCon ''VAddr'' [] (Boxed Writable None))"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_14_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_15_script : tac list = [
(ForceTac @{thms matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_15[unfolded abbreviated_type_defs] :
  "type_wellformed 0 0 {} (TRecord [(''p1'', (abbreviatedType10, Taken)), (''p2'', (TCon ''VAddr'' [] (Boxed Writable None), Taken))] Unboxed)"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_15_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_16_script : tac list = [
(RTac @{thm typing_subst}),
(SimpSolveTac ([],[])),
(SimpTac ([],[(nth @{thms HOL.simp_thms} (25-1)),(nth @{thms HOL.simp_thms} (26-1))]))
] \<close>


lemma typing_helper_16[unfolded abbreviated_type_defs] :
  "subst_wellformed 0 [] {} [] [] 0 [] {}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_16_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_17_script : tac list = [
(ForceTac @{thms matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_17[unfolded abbreviated_type_defs] :
  "type_wellformed 0 0 {} (TFun (TCon ''VAddr'' [] (Boxed Writable None)) abbreviatedType6)"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_17_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_18_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_18[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} TUnit {E, S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_18_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_19_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_19[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} (TSum [(''TIMEOUT_TIMEBASE_100_US'', (TUnit, Checked)), (''TIMEOUT_TIMEBASE_10_US'', (TUnit, Checked)), (''TIMEOUT_TIMEBASE_1_MS'', (TUnit, Unchecked)), (''TIMEOUT_TIMEBASE_1_US'', (TUnit, Checked))]) {E, S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_19_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_20_script : tac list = [
(ForceTac @{thms matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_20[unfolded abbreviated_type_defs] :
  "type_wellformed 0 0 {} (TSum [(''TIMEOUT_TIMEBASE_100_US'', (TUnit, Checked)), (''TIMEOUT_TIMEBASE_10_US'', (TUnit, Checked)), (''TIMEOUT_TIMEBASE_1_MS'', (TUnit, Unchecked)), (''TIMEOUT_TIMEBASE_1_US'', (TUnit, Checked))])"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_20_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_21_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_21[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} abbreviatedType4 {E, S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_21_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_22_script : tac list = [
(ForceTac @{thms matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_22[unfolded abbreviated_type_defs] :
  "type_wellformed 0 0 {} abbreviatedType4"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_22_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_23_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_23[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} (TSum [(''TIMESTAMP_TIMEBASE_100_US'', (TUnit, Checked)), (''TIMESTAMP_TIMEBASE_10_US'', (TUnit, Checked)), (''TIMESTAMP_TIMEBASE_1_MS'', (TUnit, Checked)), (''TIMESTAMP_TIMEBASE_1_US'', (TUnit, Unchecked)), (''TIMESTAMP_TIMEBASE_SYSTEM'', (TUnit, Checked))]) {E, S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_23_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_24_script : tac list = [
(ForceTac @{thms matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_24[unfolded abbreviated_type_defs] :
  "type_wellformed 0 0 {} (TSum [(''TIMESTAMP_TIMEBASE_100_US'', (TUnit, Checked)), (''TIMESTAMP_TIMEBASE_10_US'', (TUnit, Checked)), (''TIMESTAMP_TIMEBASE_1_MS'', (TUnit, Checked)), (''TIMESTAMP_TIMEBASE_1_US'', (TUnit, Unchecked)), (''TIMESTAMP_TIMEBASE_SYSTEM'', (TUnit, Checked))])"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_24_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_25_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_25[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} abbreviatedType3 {E, S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_25_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_26_script : tac list = [
(ForceTac @{thms matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_26[unfolded abbreviated_type_defs] :
  "type_wellformed 0 0 {} abbreviatedType3"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_26_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_27_script : tac list = [
(ForceTac @{thms matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_27[unfolded abbreviated_type_defs] :
  "type_wellformed 0 0 {} (TFun abbreviatedType6 abbreviatedType6)"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_27_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_28_script : tac list = [
(ForceTac @{thms matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_28[unfolded abbreviated_type_defs] :
  "type_wellformed 0 0 {} abbreviatedType10"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_28_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_29_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_29[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} abbreviatedType8 {E}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_29_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_30_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_30[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} abbreviatedType7 {E}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_30_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_31_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_31[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} (TRecord [(''p1'', (abbreviatedType7, Taken)), (''p2'', (TPrim (Num U16), Present)), (''p3'', (TPrim Bool, Present))] Unboxed) {E, S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_31_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_32_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_32[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} (TPrim (Num U16)) {E, S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_32_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_33_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_33[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} (TRecord [(''p1'', (abbreviatedType7, Taken)), (''p2'', (TPrim (Num U16), Taken)), (''p3'', (TPrim Bool, Present))] Unboxed) {E, S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_33_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_34_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_34[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} (TRecord [(''p1'', (abbreviatedType7, Taken)), (''p2'', (TPrim (Num U16), Taken)), (''p3'', (TPrim Bool, Taken))] Unboxed) {E, S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_34_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_35_script : tac list = [
(ForceTac @{thms matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_35[unfolded abbreviated_type_defs] :
  "type_wellformed 0 0 {} (TPrim Bool)"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_35_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_36_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_36[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} (TRecord [(''regs'', (abbreviatedType12, Taken)), (''disable'', (TPrim Bool, Present))] (Boxed ReadOnly None)) {S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_36_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_37_script : tac list = [
(ForceTac @{thms matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_37[unfolded abbreviated_type_defs] :
  "type_wellformed 0 0 {} abbreviatedType7"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_37_script |> EVERY \<close>)
  done

ML_quiet \<open>
val reset_timer_e_cogent_typecorrect_script : hints treestep list = [
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_1})]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_1})]),
StepUp,
Val (TypingTacs []),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_2})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_lit'}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac []),(SimpSolveTac ([],[]))]),
Val (TypingTacs [(RTac @{thm typing_put'}),(SplitsTac [SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_3})],SOME [(RTac @{thm split_comp.left}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_4})],NONE]),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_1}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[@{thm Product_Type.prod.inject}])),(RTac @{thm typing_helper_2}),(SimpSolveTac ([],[])),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_2}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepUp,
StepUp,
StepUp
] \<close>


ML_quiet \<open>
val reset_timer_e_cogent_ttyping_details_future = get_all_typing_details_future false @{context} "reset_timer_e_cogent"
   reset_timer_e_cogent_typecorrect_script
\<close>


lemma reset_timer_e_cogent_typecorrect :
  "\<Xi>, prod.fst reset_timer_e_cogent_type, prod.fst (prod.snd reset_timer_e_cogent_type), prod.fst (prod.snd (prod.snd reset_timer_e_cogent_type)), (reset_timer_e_cogent_typetree, [Some (prod.fst (prod.snd (prod.snd (prod.snd reset_timer_e_cogent_type))))]) T\<turnstile> reset_timer_e_cogent : prod.snd (prod.snd (prod.snd (prod.snd reset_timer_e_cogent_type)))"
  apply (tactic \<open> resolve_future_typecorrect @{context} reset_timer_e_cogent_ttyping_details_future \<close>)
  done

ML_quiet \<open>
val meson_get_time_typecorrect_script : hints treestep list = [
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_5})]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_5})]),
StepUp,
Val (TypingTacs []),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_6})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_member}),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_5}]),(SimpSolveTac ([],[])),(RTac @{thm typing_helper_5}),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_2})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_member}),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_6}]),(SimpSolveTac ([],[])),(RTac @{thm typing_helper_6}),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_7})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_cast}),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_2}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_6})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_member}),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_5}]),(SimpSolveTac ([],[])),(RTac @{thm typing_helper_5}),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_2})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_member}),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_6}]),(SimpSolveTac ([],[])),(RTac @{thm typing_helper_6}),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_7})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_cast}),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_2}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_6})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_member}),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_5}]),(SimpSolveTac ([],[])),(RTac @{thm typing_helper_5}),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_2})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_member}),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_6}]),(SimpSolveTac ([],[])),(RTac @{thm typing_helper_6}),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_7})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_cast}),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_2}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_8})]),
StepUp,
Val (TypingTacs []),
StepDown,
Val (TypingTacs []),
StepDown,
StepUp,
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_6})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_member}),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_7},@{thm typing_helper_5}]),(SimpSolveTac ([],[])),(RTac @{thm typing_helper_5}),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_2})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_member}),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_6}]),(SimpSolveTac ([],[])),(RTac @{thm typing_helper_6}),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_7})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_cast}),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_2}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_7})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_lit'}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac []),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_7})]),
StepUp,
Val (TypingTacs []),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_7})]),
StepUp,
Val (TypingTacs []),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_7})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_lit'}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac []),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_7})]),
StepUp,
Val (TypingTacs []),
Val (TypingTacs []),
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_7})]),
StepUp,
Val (TypingTacs []),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_7})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_lit'}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac []),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_7})]),
StepUp,
Val (TypingTacs []),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_7})]),
StepUp,
Val (TypingTacs []),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_7})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_lit'}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac []),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_7})]),
StepUp,
Val (TypingTacs []),
Val (TypingTacs []),
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp
] \<close>


ML_quiet \<open>
val meson_get_time_ttyping_details_future = get_all_typing_details_future false @{context} "meson_get_time"
   meson_get_time_typecorrect_script
\<close>


lemma meson_get_time_typecorrect :
  "\<Xi>, prod.fst meson_get_time_type, prod.fst (prod.snd meson_get_time_type), prod.fst (prod.snd (prod.snd meson_get_time_type)), (meson_get_time_typetree, [Some (prod.fst (prod.snd (prod.snd (prod.snd meson_get_time_type))))]) T\<turnstile> meson_get_time : prod.snd (prod.snd (prod.snd (prod.snd meson_get_time_type)))"
  apply (tactic \<open> resolve_future_typecorrect @{context} meson_get_time_ttyping_details_future \<close>)
  done

ML_quiet \<open>
val meson_init_typecorrect_script : hints treestep list = [
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_9})]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_10})]),
Val (KindingTacs [(RTac @{thm typing_helper_11})]),
StepUp,
Val (TypingTacs []),
Val (KindingTacs [(RTac @{thm typing_helper_10})]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_12})]),
Val (KindingTacs [(RTac @{thm typing_helper_13})]),
StepUp,
Val (TypingTacs []),
Val (KindingTacs [(RTac @{thm typing_helper_12})]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_1})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_app}),(SplitsTac [SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_14})],SOME [(RTac @{thm split_comp.left}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_15})],NONE]),(RTac @{thm typing_afun'}),(SimpTac ([@{thm \<Xi>_def},@{thm config_get_regs_type_def[unfolded abbreviated_type_defs]}],[])),(RTac @{thm typing_helper_16}),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_17}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_13}]),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_12}]),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_18})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_unit}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [])]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_19})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_con}),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_18}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_20}),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_21})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_promote}),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_19}]),(SimpSolveTac ([],[])),(SubtypingTac [(RTac @{thm subty_tsum}),(RTac @{thm list_all2_cons}),(SimpTac ([],[])),(RTac @{thm subtyping_refl}),(RTac @{thm list_all2_cons}),(SimpTac ([],[])),(RTac @{thm subtyping_refl}),(RTac @{thm list_all2_cons}),(SimpTac ([],[])),(RTac @{thm subtyping_refl}),(RTac @{thm list_all2_cons}),(SimpTac ([],[])),(RTac @{thm subtyping_refl}),(RTac @{thm list_all2_nil}),(SimpSolveTac ([],[])),(ForceTac @{thms })])]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_1})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_put'}),(SplitsTac [SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_22})],NONE,SOME [(RTac @{thm split_comp.left}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_4})],NONE]),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_1}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[@{thm Product_Type.prod.inject}])),(RTac @{thm typing_helper_21}),(SimpSolveTac ([],[])),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_21}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_18})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_unit}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [])]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_23})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_con}),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_18}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_24}),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_25})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_promote}),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_23}]),(SimpSolveTac ([],[])),(SubtypingTac [(RTac @{thm subty_tsum}),(RTac @{thm list_all2_cons}),(SimpTac ([],[])),(RTac @{thm subtyping_refl}),(RTac @{thm list_all2_cons}),(SimpTac ([],[])),(RTac @{thm subtyping_refl}),(RTac @{thm list_all2_cons}),(SimpTac ([],[])),(RTac @{thm subtyping_refl}),(RTac @{thm list_all2_cons}),(SimpTac ([],[])),(RTac @{thm subtyping_refl}),(RTac @{thm list_all2_cons}),(SimpTac ([],[])),(RTac @{thm subtyping_refl}),(RTac @{thm list_all2_nil}),(SimpSolveTac ([],[])),(ForceTac @{thms })])]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_1})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_put'}),(SplitsTac [SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_26})],NONE,SOME [(RTac @{thm split_comp.left}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_4})],NONE]),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_1}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[@{thm Product_Type.prod.inject}])),(RTac @{thm typing_helper_25}),(SimpSolveTac ([],[])),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_25}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_1})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_app}),(SplitsTac [SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_4})],NONE]),(RTac @{thm typing_afun'}),(SimpTac ([@{thm \<Xi>_def},@{thm reset_timer_e_type_def[unfolded abbreviated_type_defs]}],[])),(RTac @{thm typing_helper_16}),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_27}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac []),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_1}]),(SimpSolveTac ([],[]))]),
Val (TypingTacs [(RTac @{thm typing_put'}),(SplitsTac [SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_4})],NONE,SOME [(RTac @{thm split_comp.left}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_28})],NONE]),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_10}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[@{thm Product_Type.prod.inject}])),(RTac @{thm typing_helper_1}),(SimpSolveTac ([],[])),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_1}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp
] \<close>


ML_quiet \<open>
val meson_init_ttyping_details_future = get_all_typing_details_future false @{context} "meson_init"
   meson_init_typecorrect_script
\<close>


lemma meson_init_typecorrect :
  "\<Xi>, prod.fst meson_init_type, prod.fst (prod.snd meson_init_type), prod.fst (prod.snd (prod.snd meson_init_type)), (meson_init_typetree, [Some (prod.fst (prod.snd (prod.snd (prod.snd meson_init_type))))]) T\<turnstile> meson_init : prod.snd (prod.snd (prod.snd (prod.snd meson_init_type)))"
  apply (tactic \<open> resolve_future_typecorrect @{context} meson_init_ttyping_details_future \<close>)
  done

ML_quiet \<open>
val meson_set_timeout_typecorrect_script : hints treestep list = [
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_29})]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_30})]),
Val (KindingTacs [(RTac @{thm typing_helper_31})]),
StepUp,
Val (TypingTacs []),
Val (KindingTacs [(RTac @{thm typing_helper_30})]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_32})]),
Val (KindingTacs [(RTac @{thm typing_helper_33})]),
StepUp,
Val (TypingTacs []),
Val (KindingTacs [(RTac @{thm typing_helper_32})]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_8})]),
Val (KindingTacs [(RTac @{thm typing_helper_34})]),
StepUp,
Val (TypingTacs []),
Val (KindingTacs [(RTac @{thm typing_helper_8})]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_1})]),
Val (KindingTacs [(RTac @{thm typing_helper_10})]),
StepUp,
Val (TypingTacs []),
Val (KindingTacs [(RTac @{thm typing_helper_1})]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_1})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_put'}),(SplitsTac [SOME [(RTac @{thm split_comp.left}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_4})],NONE,SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_35})],NONE]),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_1}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[@{thm Product_Type.prod.inject}])),(RTac @{thm typing_helper_8}),(SimpSolveTac ([],[])),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_8}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_2})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_cast}),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_32}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_1})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_put'}),(SplitsTac [SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_3})],SOME [(RTac @{thm split_comp.left}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_4})],NONE]),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_1}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[@{thm Product_Type.prod.inject}])),(RTac @{thm typing_helper_2}),(SimpSolveTac ([],[])),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_2}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_36})]),
StepUp,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_8})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_member}),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_36}]),(SimpSolveTac ([],[])),(RTac @{thm typing_helper_36}),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
Val (TypingTacs []),
StepDown,
StepUp,
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_8})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_lit'}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac []),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_1})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_put'}),(SplitsTac [SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_35})],NONE,SOME [(RTac @{thm split_comp.left}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_4})],NONE]),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_1}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[@{thm Product_Type.prod.inject}])),(RTac @{thm typing_helper_8}),(SimpSolveTac ([],[])),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_8}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_30})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_put'}),(SplitsTac [SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_4})],NONE,SOME [(RTac @{thm split_comp.left}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_28})],NONE]),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_10}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[@{thm Product_Type.prod.inject}])),(RTac @{thm typing_helper_1}),(SimpSolveTac ([],[])),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_1}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_8})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_lit'}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac []),(SimpSolveTac ([],[]))]),
Val (TypingTacs [(RTac @{thm typing_put'}),(SplitsTac [SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_35})],SOME [(RTac @{thm split_comp.left}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_37})],NONE]),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_30}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[@{thm Product_Type.prod.inject}])),(RTac @{thm typing_helper_8}),(SimpSolveTac ([],[])),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_8}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepUp,
StepUp,
StepUp,
StepUp,
Val (TypingTacs [(RTac @{thm typing_put'}),(SplitsTac [NONE,SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_4})],NONE,SOME [(RTac @{thm split_comp.left}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_28})],NONE]),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_10}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[@{thm Product_Type.prod.inject}])),(RTac @{thm typing_helper_1}),(SimpSolveTac ([],[])),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_1}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepUp,
Val (KindingTacs [(RTac @{thm typing_helper_8})]),
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp
] \<close>


ML_quiet \<open>
val meson_set_timeout_ttyping_details_future = get_all_typing_details_future false @{context} "meson_set_timeout"
   meson_set_timeout_typecorrect_script
\<close>


lemma meson_set_timeout_typecorrect :
  "\<Xi>, prod.fst meson_set_timeout_type, prod.fst (prod.snd meson_set_timeout_type), prod.fst (prod.snd (prod.snd meson_set_timeout_type)), (meson_set_timeout_typetree, [Some (prod.fst (prod.snd (prod.snd (prod.snd meson_set_timeout_type))))]) T\<turnstile> meson_set_timeout : prod.snd (prod.snd (prod.snd (prod.snd meson_set_timeout_type)))"
  apply (tactic \<open> resolve_future_typecorrect @{context} meson_set_timeout_ttyping_details_future \<close>)
  done

ML_quiet \<open>
val meson_stop_timer_typecorrect_script : hints treestep list = [
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_30})]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_1})]),
Val (KindingTacs [(RTac @{thm typing_helper_10})]),
StepUp,
Val (TypingTacs []),
Val (KindingTacs [(RTac @{thm typing_helper_1})]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_8})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_lit'}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac []),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_1})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_put'}),(SplitsTac [SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_35})],SOME [(RTac @{thm split_comp.left}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_4})],NONE]),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_1}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[@{thm Product_Type.prod.inject}])),(RTac @{thm typing_helper_8}),(SimpSolveTac ([],[])),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_8}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_30})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_put'}),(SplitsTac [SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_4})],NONE,SOME [(RTac @{thm split_comp.left}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_28})],NONE]),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_10}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[@{thm Product_Type.prod.inject}])),(RTac @{thm typing_helper_1}),(SimpSolveTac ([],[])),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_1}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_8})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_lit'}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac []),(SimpSolveTac ([],[]))]),
Val (TypingTacs [(RTac @{thm typing_put'}),(SplitsTac [SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_35})],SOME [(RTac @{thm split_comp.left}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_37})],NONE]),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_30}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[@{thm Product_Type.prod.inject}])),(RTac @{thm typing_helper_8}),(SimpSolveTac ([],[])),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_8}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepUp,
StepUp,
StepUp,
StepUp,
StepUp,
StepUp
] \<close>


ML_quiet \<open>
val meson_stop_timer_ttyping_details_future = get_all_typing_details_future false @{context} "meson_stop_timer"
   meson_stop_timer_typecorrect_script
\<close>


lemma meson_stop_timer_typecorrect :
  "\<Xi>, prod.fst meson_stop_timer_type, prod.fst (prod.snd meson_stop_timer_type), prod.fst (prod.snd (prod.snd meson_stop_timer_type)), (meson_stop_timer_typetree, [Some (prod.fst (prod.snd (prod.snd (prod.snd meson_stop_timer_type))))]) T\<turnstile> meson_stop_timer : prod.snd (prod.snd (prod.snd (prod.snd meson_stop_timer_type)))"
  apply (tactic \<open> resolve_future_typecorrect @{context} meson_stop_timer_ttyping_details_future \<close>)
  done

ML_quiet \<open>
val (_, reset_timer_e_cogent_typing_tree, reset_timer_e_cogent_typing_bucket)
= Future.join reset_timer_e_cogent_ttyping_details_future
\<close>


ML_quiet \<open>
val (_, meson_get_time_typing_tree, meson_get_time_typing_bucket)
= Future.join meson_get_time_ttyping_details_future
\<close>


ML_quiet \<open>
val (_, meson_init_typing_tree, meson_init_typing_bucket)
= Future.join meson_init_ttyping_details_future
\<close>


ML_quiet \<open>
val (_, meson_set_timeout_typing_tree, meson_set_timeout_typing_bucket)
= Future.join meson_set_timeout_ttyping_details_future
\<close>


ML_quiet \<open>
val (_, meson_stop_timer_typing_tree, meson_stop_timer_typing_bucket)
= Future.join meson_stop_timer_ttyping_details_future
\<close>


end
